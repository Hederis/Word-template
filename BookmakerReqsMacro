
Option Explicit

Sub BookmakerReqs()
'-----------------------------------------------------------

'Created by Erica Warren - erica.warren@macmillan.com
'3/27/2015: converts solo CNs to CTs
'           page numbers added to Illustrations List
'           Added style report WITH character styles
'3/20/2015: Added check if template is attached
'3/17/2015: Added Illustrations List
'3/16/2015: Fixed error creating text file, added title/author/isbn confirmation

'------------------------------------------------------------


Application.ScreenUpdating = False

'-------Check if Macmillan template is attached--------------

Dim currentTemplate As String
Dim ourTemplate1 As String
Dim ourTemplate2 As String

currentTemplate = ActiveDocument.BuiltInDocumentProperties(wdPropertyTemplate)
ourTemplate1 = "macmillan.dotm"
ourTemplate2 = "macmillan_NoColor.dotm"

Debug.Print "Current template is " & currentTemplate & vbNewLine

If currentTemplate <> ourTemplate1 Then
    If currentTemplate <> ourTemplate2 Then
        MsgBox "Please attach the Macmillan Style Template to this document and run the macro again."
        Exit Sub
    End If
End If


'-----make sure document is saved--------------------------

Dim mainDoc As Document
Set mainDoc = ActiveDocument
Dim iReply As Integer
Dim docSaved As Boolean

docSaved = mainDoc.Saved
If docSaved = False Then
    iReply = MsgBox("Your document '" & mainDoc & "' contains unsaved changes." & vbNewLine & vbNewLine & _
        "Click OK and I will save your document and run the macro." & vbNewLine & vbNewLine & "Click 'Cancel' to exit.", _
            vbOKCancel, "Alert")
    If iReply = vbOK Then
        mainDoc.Save
    Else
        Exit Sub
    End If
End If

'-------Check that only approved tor.com styles are used-----
Dim paraStyle As String
Dim activeParaCount As Integer
Dim badStyles(100) As String        'Increase number if want to count more bad styles
Dim badCount As Integer
Dim activeParaRange As Range
Dim pageNumber As Integer
Dim D As Integer

badCount = 0
activeParaCount = ActiveDocument.Paragraphs.Count

For D = 1 To activeParaCount
    paraStyle = ActiveDocument.Paragraphs(D).Style
    
    'Debug.Print ActiveDocument.Paragraphs(A).Style & vbNewLine
    
     'Broken down into multiple statements because max 24 line continuation characters in a statement
     'And also most common styles listed in first IF-THEN so it won't have to search all most of the time
    If paraStyle <> "Text - Standard (tx)" And _
        paraStyle <> "Text - Standard Space After (tx#)" And _
        paraStyle <> "Text - Standard Space Before (#tx)" And _
        paraStyle <> "Text - Standard Space Around (#tx#)" And _
        paraStyle <> "Text - Std No-Indent (tx1)" And _
        paraStyle <> "Text - Std No-Indent Space Before (#tx1)" And _
        paraStyle <> "Text - Std No-Indent Space After (tx1#)" And _
        paraStyle <> "Text - Std No-Indent Space Around (#tx1#)" And _
        paraStyle <> "Chap Number (cn)" And _
        paraStyle <> "Chap Title (ct)" And _
        paraStyle <> "Chap Opening Text No-Indent (cotx1)" And _
        paraStyle <> "Chap Opening Text No-Indent Space After (cotx1#)" And _
        paraStyle <> "Space Break (#)" And _
        paraStyle <> "Page Break (pb)" And _
        paraStyle <> "Halftitle Book Title (htit)" And _
        paraStyle <> "Titlepage Book Title (tit)" And _
        paraStyle <> "Titlepage Book Subtitle (stit)" And _
        paraStyle <> "Titlepage Author Name (au)" And _
        paraStyle <> "Titlepage Imprint Line (imp)" And _
        paraStyle <> "Titlepage Cities (cit)" And _
        paraStyle <> "Copyright Text single space (crtx)" And _
        paraStyle <> "Copyright Text double space (crtxd)" And _
        paraStyle <> "Space Break with Ornament (orn)" And _
        paraStyle <> "Dedication (ded)" And _
        paraStyle <> "Dedication Author (dedau)" Then
            If paraStyle <> "Ad Card Main Head (acmh)" And _
                paraStyle <> "Ad Card Subhead (acsh)" And _
                paraStyle <> "Ad Card List of Titles (acl)" And _
                paraStyle <> "Extract Head (exth)" And _
                paraStyle <> "Extract-No Indent (ext1)" And _
                paraStyle <> "Extract (ext)" And _
                paraStyle <> "Illustration holder (ill)" And _
                paraStyle <> "Caption (cap)" And _
                paraStyle <> "Illustration Source (is)" And _
                paraStyle <> "Part Number (pn)" And _
                paraStyle <> "Part Title (pt)" And _
                paraStyle <> "Front Sales Title (fst)" And _
                paraStyle <> "Front Sales Quote NoIndent (fsq1)" And _
                paraStyle <> "Front Sales Quote (fsq)" And _
                paraStyle <> "Front Sales Quote Source (fsqs)" And _
                paraStyle <> "Epigraph – non-verse (epi)" And _
                paraStyle <> "Epigraph – verse (epiv)" And _
                paraStyle <> "Epigraph Source (eps)" And _
                paraStyle <> "Chap Epigraph – non-verse (cepi)" And _
                paraStyle <> "Chap Epigraph – verse (cepiv)" And _
                paraStyle <> "Chap Epigraph Source (ceps)" And _
                paraStyle <> "Text - Standard ALT (atx)" And _
                paraStyle <> "Text - Std No-Indent ALT (atx1)" And _
                paraStyle <> "Text - Computer Type No-Indent (com1)" And _
                paraStyle <> "Text - Computer Type (com)" Then
                    If paraStyle <> "Titlepage Contributor Name (con)" And _
                        paraStyle <> "Titlepage Translator Name (tran)" And _
                        paraStyle <> "FM Head (fmh)" And _
                        paraStyle <> "FM Subhead (fmsh)" And _
                        paraStyle <> "FM Epigraph – non-verse (fmepi)" And _
                        paraStyle <> "FM Epigraph – verse (fmepiv)" And _
                        paraStyle <> "FM Epigraph Source (fmeps)" And _
                        paraStyle <> "FM Text (fmtx)" And _
                        paraStyle <> "FM Text Space After (fmtx#)" And _
                        paraStyle <> "FM Text Space Before (#fmtx)" And _
                        paraStyle <> "FM Text Space Around (#fmtx#)" And _
                        paraStyle <> "FM Text No-Indent (fmtx1)" And _
                        paraStyle <> "FM Text No-Indent Space Before (#fmtx1)" And _
                        paraStyle <> "FM Text No-Indent Space After (fmtx1#)" And _
                        paraStyle <> "FM Text No-Indent Space Around (#fmtx1#)" And _
                        paraStyle <> "Chap Ornament (corn)" And _
                        paraStyle <> "Chap Ornament ALT (corn2)" And _
                        paraStyle <> "Space Break - 3-Line (ls3)" And _
                        paraStyle <> "Space Break - 2-Line (ls2)" And _
                        paraStyle <> "Space Break - 1-Line (ls1)" And _
                        paraStyle <> "Space Break with ALT Ornament (orn2)" And _
                        paraStyle <> "Chap Title Nonprinting (ctnp)" And _
                        paraStyle <> "Front Sales Text (fstx)" And _
                        paraStyle <> "Chap Opening Text Space After (cotx#)" And _
                        paraStyle <> "Chap Opening Text (cotx)" Then
                            
                            badCount = badCount + 1
                            Set activeParaRange = ActiveDocument.Paragraphs(D).Range
                            pageNumber = activeParaRange.Information(wdActiveEndPageNumber)
                            badStyles(badCount) = "**ERROR: Bad style on page " & pageNumber & " (Paragraph " & D & "): " & _
                                vbTab & paraStyle & vbNewLine & vbNewLine
                    End If
            End If
    End If
Next



'-------Count number of occurences of each required style----

Dim styleName(6) As String                      ' Declare number of items in array
Dim styleCount(6) As Integer                    ' ditto
Dim A As Long

styleName(1) = "Titlepage Book Title (tit)"
styleName(2) = "Titlepage Author Name (au)"
styleName(3) = "span ISBN (isbn)"
styleName(4) = "Chap Number (cn)"
styleName(5) = "Chap Title (ct)"
styleName(6) = "Chap Title Nonprinting (ctnp)"

For A = 1 To UBound(styleName())
    With ActiveDocument.Range.Find
        .ClearFormatting
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .Style = ActiveDocument.Styles(styleName(A))
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    Do While .Execute(Forward:=True) = True
        styleCount(A) = styleCount(A) + 1
    Loop
    End With
Next

Debug.Print styleName(1) & ": " & styleCount(1) & vbNewLine _
            ; styleName(2) & ": " & styleCount(2) & vbNewLine _
            ; styleName(3) & ": " & styleCount(3) & vbNewLine _
            ; styleName(4) & ": " & styleCount(4) & vbNewLine _
            ; styleName(5) & ": " & styleCount(5) & vbNewLine _
            ; styleName(6) & ": " & styleCount(6) & vbNewLine
            
'------------Convert solo Chap Number paras to Chap Title-------

If styleCount(4) > 0 And styleCount(5) = 0 Then         'If Chap Num > 0 and Chap Title = 0

'Move selection to start of document
Selection.HomeKey Unit:=wdStory

    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles("Chap Number (cn)")
    Selection.Find.Replacement.ClearFormatting
    Selection.Find.Replacement.Style = ActiveDocument.Styles("Chap Title (ct)")
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute Replace:=wdReplaceAll
    
End If

'------------Get title/author/isbn text from document-----------

Dim styleNameB(3) As String         ' must declare number of items in array here
Dim bString(3) As String            ' and here
Dim b As Long

'Move selection to start of document
Selection.HomeKey Unit:=wdStory

styleNameB(1) = "Titlepage Book Title (tit)"
styleNameB(2) = "Titlepage Author Name (au)"
styleNameB(3) = "span ISBN (isbn)"

'Search for required style, select, and copy
For b = 1 To UBound(styleNameB())
    Selection.Find.ClearFormatting
    Selection.Find.Style = ActiveDocument.Styles(styleNameB(b))
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindContinue
        .Format = True
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    Selection.Find.Execute
    bString(b) = Selection.Text
Next

'Set as blank if nothing has been tagged as that style (otherwise is just first character of the document)
If styleCount(1) = 0 Then
    bString(1) = ""
End If

If styleCount(2) = 0 Then
    bString(2) = ""
End If

If styleCount(3) = 0 Then
    bString(3) = ""
End If


Debug.Print "Title: " & bString(1) & vbNewLine & _
            "Author: " & bString(2) & vbNewLine & _
            "ISBN: " & bString(3) & vbNewLine
            
'-------------------Get Illustrations List from Document-----------

Dim cString(1000) As String             'Max number of illustrations. Could be lower than 1000.
Dim cCount As Integer
Dim pageNumberC As Integer

cCount = 0

'Move selection to start of document
Selection.HomeKey Unit:=wdStory

    Selection.Find.ClearFormatting
    With Selection.Find
        .Text = ""
        .Replacement.Text = ""
        .Forward = True
        .Wrap = wdFindStop
        .Format = True
        .Style = ActiveDocument.Styles("Illustration holder (ill)")
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With

Do While Selection.Find.Execute = True And cCount < 1000            'cCount < 1000 so we don't get an infinite loop
    cCount = cCount + 1
    pageNumberC = Selection.Information(wdActiveEndPageNumber)
    cString(cCount) = "Page " & pageNumberC & ": " & Selection.Text
Loop

'Move selection back to start of document
Selection.HomeKey Unit:=wdStory

If cCount > 1000 Then
    MsgBox "You have more than 1,000 illustrations tagged in your manuscript." & vbNewLine & _
    "Please contact workflows@macmillan.com to complete your illustration list."
End If

If cCount = 0 Then
    cCount = 1
    cString(1) = "no illustrations detected" & vbNewLine
End If

Debug.Print cString(1) & cString(2) & cString(3)

'-------------------Get list of good paragraph styles from document---------

Dim activeDoc As Document
Set activeDoc = ActiveDocument
Dim stylesGood() As String
Dim stylesGoodLong As Long
stylesGoodLong = 100
ReDim stylesGood(stylesGoodLong)
Dim styleGoodCount As Integer
Dim activeParaCountJ As Integer
Dim J As Integer, K As Integer
Dim paraStyleGood As String

Application.DisplayStatusBar = True
Application.ScreenUpdating = False

'Alter built-in Normal (Web) style temporarily (later, maybe forever?)
ActiveDocument.Styles("Normal (Web)").NameLocal = "_"

' Collect all styles being used
styleGoodCount = 0
activeParaCountJ = activeDoc.Paragraphs.Count
For J = 1 To activeParaCountJ
    'Next two lines are for the status bar
    Application.StatusBar = "Checking paragraph: " & J & " of " & activeParaCount
    If J Mod 100 = 0 Then DoEvents
    
    paraStyleGood = activeDoc.Paragraphs(J).Style
    
    If Right(paraStyleGood, 1) = ")" Then
        For K = 1 To styleGoodCount
            If paraStyleGood = stylesGood(K) Then
                K = styleGoodCount
                Exit For
            End If
        Next K
        If K = styleGoodCount + 1 Then
            styleGoodCount = K
            stylesGood(styleGoodCount) = paraStyleGood
        End If
    End If
Next J
 
'Change Normal (Web) back (if you want to)
ActiveDocument.Styles("Normal (Web),_").NameLocal = "Normal (Web)"

'Sort good styles
If K <> 0 Then
ReDim Preserve stylesGood(K)
WordBasic.SortArray stylesGood()
End If

For K = 1 To styleGoodCount
    Debug.Print stylesGood(K)
Next

'-------------------get list of good character styles--------------

Dim charStyles As String
Dim styleNameM(21) As String        'declare number in array
Dim M As Integer

styleNameM(1) = "span italic characters (ital)"
styleNameM(2) = "span boldface characters (bf)"
styleNameM(3) = "span small caps characters (sc)"
styleNameM(4) = "span underscore characters (us)"
styleNameM(5) = "span superscript characters (sup)"
styleNameM(6) = "span subscript characters (sub)"
styleNameM(7) = "span bold ital (bem)"
styleNameM(8) = "span smcap ital (scital)"
styleNameM(9) = "span smcap bold (scbold)"
styleNameM(10) = "span symbols (sym)"
styleNameM(11) = "span accent characters (acc)"
styleNameM(12) = "span cross-reference (xref)"
styleNameM(13) = "span hyperlink (url)"
styleNameM(14) = "span material to come (tk)"
styleNameM(15) = "span carry query (cq)"
styleNameM(16) = "span preserve characters (pre)"
styleNameM(17) = "bookmaker force page break (br)"
styleNameM(18) = "bookmaker keep together (kt)"
styleNameM(19) = "span ISBN (isbn)"
styleNameM(20) = "span symbols ital (symi)"
styleNameM(21) = "span symbols bold (symb)"

'Move selection back to start of document
Selection.HomeKey Unit:=wdStory

For M = 1 To UBound(styleNameM())
    With Selection.Find
        .Style = ActiveDocument.Styles(styleNameM(M))
        .Wrap = wdFindContinue
        .Format = True
    End With
    If Selection.Find.Execute = True Then
        charStyles = charStyles & styleNameM(M) & vbNewLine
    End If
Next M

'Move selection back to start of document
Selection.HomeKey Unit:=wdStory

Debug.Print charStyles

'-------------------Create error report----------------------------

' Prepare error message
Dim errorList As String
errorList = ""
If styleCount(1) = 0 Then errorList = errorList & "**ERROR: No tagged title detected." & vbNewLine & vbNewLine
If styleCount(1) > 1 Then errorList = errorList & "**ERROR: Too many title paragraphs detected." & vbNewLine & vbNewLine
If styleCount(2) = 0 Then errorList = errorList & "**ERROR: No tagged author name detected." & vbNewLine & vbNewLine
If styleCount(3) = 0 Then errorList = errorList & "**ERROR: No tagged ISBN detected." & vbNewLine & vbNewLine
If styleCount(4) > 0 And styleCount(5) = 0 Then errorList = errorList & "**ERROR: Chap Number (cn) cannot " & _
    "be used alone (every chapter must start with Chapter Title (ct)). Chapter number paragraphs have been " & _
    "converted to the Chap Title (ct) style." & vbNewLine & vbNewLine
If styleCount(4) = 0 And styleCount(5) = 0 And styleCount(6) = 0 Then errorList = errorList & "**ERROR: No tagged " & _
    "chapter openers detected. If your book does not have chapter openers, use the Chap Title Nonprinting (ctnp) " & _
    "style at the start of each section." & vbNewLine & vbNewLine
If styleCount(4) > styleCount(5) And styleCount(5) > 0 Then errorList = errorList & "**ERROR: More Chap Number (cn) paragraphs than Chap " & _
    "Title (ct) paragraphs found. Each Chap Number (cn) paragraph MUST be followed by a Chap Title (ct) paragraph. " & _
    "Please adjust your styles." & vbNewLine & vbNewLine

'Add bad styles to error message
For D = 1 To badCount
    errorList = errorList & badStyles(D)
Next D

If errorList <> "" Then
    errorList = errorList & vbNewLine & "If you have any questions about how to handle these errors, " & _
        "please contact workflows@macmillan.com." & vbNewLine
End If

Debug.Print errorList

'Create report file
Dim activeRng As Range
Set activeDoc = ActiveDocument
Set activeRng = ActiveDocument.Range
Dim activeDocName As String
Dim activeDocPath As String
Dim reqReportDoc As String
Dim reqReportDocAlt As String
Dim TheOS As String
TheOS = System.OperatingSystem
Dim fnum As Integer

'activeDocName below works for .doc and .docx
activeDocName = Left(activeDoc.Name, InStrRev(activeDoc.Name, ".doc") - 1)
activeDocPath = Replace(activeDoc.Path, activeDoc.Name, "")

'create text file
reqReportDoc = activeDocPath & activeDocName & "_BookmakerReport.txt"

''''for 32 char Mc OS bug- could check if this is Mac OS too < PART 1
If Not TheOS Like "*Mac*" Then                      'If Len(activeDocName) > 18 Then        (legacy, does not take path into account)
    reqReportDoc = activeDocPath & "\" & activeDocName & "_BookmakerReport.txt"
Else
    Dim placeholdDocName As String
    placeholdDocName = "filenamePlacehold_Report.txt"
    reqReportDocAlt = reqReportDoc
    reqReportDoc = "Macintosh HD:private:tmp:" & placeholdDocName
End If
'''end ''''for 32 char Mc OS bug part 1

'set and open file for output
Dim E As Integer

fnum = FreeFile()
Open reqReportDoc For Output As fnum
If errorList = "" And badCount = 0 Then
    Print #fnum, vbCr
    Print #fnum, "CONGRATULATIONS! YOU PASSED!" & vbCr
    Print #fnum, "But you're not done yet. Please check the info listed below." & vbCr
    Print #fnum, vbCr

Else
    Print #fnum, vbCr
    Print #fnum, "                             OOPS!" & vbCr
    Print #fnum, "     Problems were found with the styles in your document '" & activeDoc.Name & "':" & vbCr
    Print #fnum, vbCr
    Print #fnum, vbCr
    Print #fnum, "--------------------------- ERRORS ---------------------------" & vbCr
    Print #fnum, errorList
    Print #fnum, vbCr
    Print #fnum, vbCr
End If
    Print #fnum, "--------------------------- METADATA -------------------------" & vbCr
    Print #fnum, "If any of the information below is wrong, please fix the" & vbCr
    Print #fnum, "associated styles in the manuscript." & vbCr
    Print #fnum, vbCr
    Print #fnum, "Title: " & bString(1) & vbCr
    Print #fnum, "Author: " & bString(2) & vbCr
    Print #fnum, "ISBN: " & bString(3) & vbCr
    Print #fnum, vbCr
    Print #fnum, vbCr
    Print #fnum, "----------------------- ILLUSTRATION LIST ---------------------" & vbCr
    
    If cString(1) <> "no illustrations detected" & vbNewLine Then
        Print #fnum, "Verify that this list of illustrations includes only the file" & vbCr
        Print #fnum, "names of your illustrations. Be sure to place these files in" & vbCr
        Print #fnum, "the submitted_images folder BEFORE you run the bookmaker tool." & vbCr
        Print #fnum, vbCr
    End If
    
    For E = 1 To cCount
        Print #fnum, cString(E)
    Next E
       
    Print #fnum, vbCr
    Print #fnum, "----------------------- GOOD STYLES IN USE --------------------" & vbCr
    
    For K = 1 To styleGoodCount
        Print #fnum, stylesGood(K)
    Next K
    Print #fnum, charStyles

Close #fnum

''''for 32 char Mc OS bug-<PART 2
If reqReportDocAlt <> "" Then
Name reqReportDoc As reqReportDocAlt
End If
''''END for 32 char Mac OS bug-<PART 2

'----------------open Bookmaker Report for user once it is complete--------------------------.
Dim Shex As Object

If Not TheOS Like "*Mac*" Then
   Set Shex = CreateObject("Shell.Application")
   Shex.Open (reqReportDoc)
Else
    MacScript ("tell application ""TextEdit"" " & vbCr & _
    "open " & """" & reqReportDocAlt & """" & " as alias" & vbCr & _
    "activate" & vbCr & _
    "end tell" & vbCr)
End If

Application.ScreenUpdating = True

End Sub