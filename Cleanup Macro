  Option Explicit
Option Base 1
Dim activeRng As Range

Sub MacmillanManuscriptCleanup()

''''''''''''''''''''''''''''''''
'''created by Matt Retzer  - matthew.retzer@macmillan.com
'''version 3.0
'''last updated 6/10/14:
''' - added Style Report Macro Sub
''' - added srErrorCheck Function
'''version2.1 - 5/27/14:
''' - added 7 styles for preserving white space,
''' - preserving superscript & subscript - converting to char styles.
''' - added prelim checks for protected documents, incidental pre-existing backtick tags
''' - consolidated all preliminary error checks into one function
''' - updating char styles to match new prefixes, in style replacements, hyperlink finds, and errorcheck1
''' - fixed field object hyperlink bug
''' - add find/replace for any extra hyperlink tags `H`
''' - removed .Forward = True from all Find/Replaces as it is redundant when wrap = Continue
''' - made all Subs Private except for the Main one


'-----------run preliminary error checks------------
Dim exitOnError As Boolean
exitOnError = zz_errorChecks()

If exitOnError <> False Then
Exit Sub
End If

'-----------Remove White Space------------
Application.ScreenUpdating = False

Call zz_clearFind                          'Clear find object
Call RmSectionBreakandUnicode                     'has to be alone b/c MAtch Wildcards hasto be disabled
Call zz_clearFind
Call PreserveWhiteSpaceinBrkStylesA     'Part A tags paragraphs in 3 styles so consecutive ones don't get wiped
Call zz_clearFind
Call RmWhiteSpaceB                      'also does ellipses, section breaks
Call zz_clearFind
Call PreserveWhiteSpaceinBrkStylesB     'Part B removes the tags and reapplies the styles

Application.ScreenUpdating = True
Application.ScreenRefresh

'-----------Replace Local Styles-----------
Application.ScreenUpdating = False

Call zz_clearFind                          'Clear find object
Call TagHyperlinks            'replace hyperlink styles, style unstyled hyperlinks
Call zz_clearFind
Call StripOrReplaceLocalStyles          'tag local styling;  reset all font properties, reapply local styling through char styles
Call zz_clearFind
Call RmHighlights                           'remove text highlights
Call zz_clearFind
Call StraightQuotestoSmartQuotes  'replaces all straight quotes (single and double) with Smart quotes, leaves Autocorrect setting for same enabled
Call zz_clearFind

Application.ScreenUpdating = True
Application.ScreenRefresh

End Sub

Private Sub RmSectionBreakandUnicode()
Set activeRng = ActiveDocument.Range
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = "^b"
  .Replacement.Text = "^13"
  .Wrap = wdFindContinue
  .Execute Replace:=wdReplaceAll
End With
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = "^u8230"
  .Replacement.Text = " . . . "
  .Wrap = wdFindContinue
  .Execute Replace:=wdReplaceAll
End With
End Sub

Private Sub PreserveWhiteSpaceinBrkStylesA()
Set activeRng = ActiveDocument.Range

Dim tagArray(10) As String                                   ' number of items in array should be declared here
Dim StylePreserveArray(10) As String              ' number of items in array should be declared here
Dim e As Long

StylePreserveArray(1) = "Space/Stanza Break (#)"
StylePreserveArray(2) = "Space Break + Ornament (orn)"
StylePreserveArray(3) = "Space Break + ALT Ornament (orn2)"
StylePreserveArray(4) = "Section Break (sbr)"
StylePreserveArray(5) = "Part Start (pts)"
StylePreserveArray(6) = "Part End (pte)"
StylePreserveArray(7) = "Page Break (pb)"
StylePreserveArray(8) = "Space Break - 1-Line (ls1)"
StylePreserveArray(9) = "Space Break - 2-Line (ls2)"
StylePreserveArray(10) = "Space Break - 3-Line (ls3)"
tagArray(1) = "`1`^&`1`"
tagArray(2) = "`2`^&`2`"
tagArray(3) = "`3`^&`3`"
tagArray(4) = "`4`^&`4`"
tagArray(5) = "`5`^&`5`"
tagArray(6) = "`6`^&`6`"
tagArray(7) = "`7`^&`7`"
tagArray(8) = "`8`^&`8`"
tagArray(9) = "`9`^&`9`"
tagArray(10) = "`0`^&`0`"

For e = 1 To UBound(StylePreserveArray())
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = "^13"
  .Replacement.Text = tagArray(e)
  .Wrap = wdFindContinue
  .Format = True
  .Style = StylePreserveArray(e)
  .MatchCase = False
  .MatchWholeWord = False
  .MatchWildcards = True
  .MatchSoundsLike = False
  .MatchAllWordForms = False
  .Execute Replace:=wdReplaceAll
End With
Next
End Sub

Private Sub RmWhiteSpaceB()
Set activeRng = ActiveDocument.Range

Dim wsFindArray(19) As String              'number of items in array should be declared here
Dim wsReplaceArray(19) As String       'and here
Dim i As Long

wsFindArray(1) = ".{4,}"             '4 or more consecutive periods, into proper 4 dot ellipse
wsFindArray(2) = "..."                  '3 consecutive periods, into 3 dot ellipse
wsFindArray(3) = "([! ]). . ."          'add leading space for ellipse if not present
wsFindArray(4) = ". . .([! ])"          'add trailing space for ellipse if not present
wsFindArray(5) = "^t{1,}"             'tabs
wsFindArray(6) = "^l{1,}"               'manual line breaks
wsFindArray(7) = "^m{1,}"              'manual page breaks
wsFindArray(8) = " {2,}"               '2 or more spaces
wsFindArray(9) = "^13 "               'paragraph, space
wsFindArray(10) = " ^13"               'space, paragraph
wsFindArray(11) = "^13{2,}"          '2 or more paragraphs
wsFindArray(12) = "---"                   '3 hyphens to emdash
wsFindArray(13) = "--"                   '2 hyphens to endash
wsFindArray(14) = " -"                  'hyphen leading space-remove
wsFindArray(15) = "- "                  'hyphen trailing space-remove
wsFindArray(16) = " ^+"                  'emdash leading space-remove
wsFindArray(17) = "^+ "                  'emdash trailing space-remove
wsFindArray(18) = " ^="                  'endash leading space-remove
wsFindArray(19) = "^= "                  'endash trailing space-remove

wsReplaceArray(1) = " . . . . "
wsReplaceArray(2) = " . . . "
wsReplaceArray(3) = "\1 . . ."
wsReplaceArray(4) = ". . . \1"
wsReplaceArray(5) = ""
wsReplaceArray(6) = "^p"
wsReplaceArray(7) = "^p"
wsReplaceArray(8) = " "
wsReplaceArray(9) = "^p"
wsReplaceArray(10) = "^p"
wsReplaceArray(11) = "^p"
wsReplaceArray(12) = "^+"
wsReplaceArray(13) = "^="
wsReplaceArray(14) = "-"
wsReplaceArray(15) = "-"
wsReplaceArray(16) = "^+"
wsReplaceArray(17) = "^+"
wsReplaceArray(18) = "^="
wsReplaceArray(19) = "^="

For i = 1 To UBound(wsFindArray())
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = wsFindArray(i)
  .Replacement.Text = wsReplaceArray(i)
  .Wrap = wdFindContinue
  .Format = False
  .MatchCase = False
  .MatchWholeWord = False
  .MatchWildcards = True
  .MatchSoundsLike = False
  .MatchAllWordForms = False
  .Execute Replace:=wdReplaceAll
End With
Next
End Sub

Private Sub PreserveWhiteSpaceinBrkStylesB()
Set activeRng = ActiveDocument.Range

Dim tagArrayB(10) As String                                   ' number of items in array should be declared here
Dim f As Long

tagArrayB(1) = "`1`(^13)`1`"
tagArrayB(2) = "`2`(^13)`2`"
tagArrayB(3) = "`3`(^13)`3`"
tagArrayB(4) = "`4`(^13)`4`"
tagArrayB(5) = "`5`(^13)`5`"
tagArrayB(6) = "`6`(^13)`6`"
tagArrayB(7) = "`7`(^13)`7`"
tagArrayB(8) = "`8`(^13)`8`"
tagArrayB(9) = "`9`(^13)`9`"
tagArrayB(10) = "`0`(^13)`0`"

For f = 1 To UBound(tagArrayB())
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = tagArrayB(f)
  .Replacement.Text = "\1"
  .Wrap = wdFindContinue
  .Format = False
  .MatchCase = False
  .MatchWholeWord = False
  .MatchWildcards = True
  .MatchSoundsLike = False
  .MatchAllWordForms = False
  .Execute Replace:=wdReplaceAll
End With
Next
End Sub

Private Sub TagHyperlinks()
Set activeRng = ActiveDocument.Range

With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = ""
  .Replacement.Text = "`H`^&`H`"
  .Wrap = wdFindContinue
  .Format = True
  .Style = "Hyperlink"
  .Execute Replace:=wdReplaceAll
End With

With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = ""
  .Replacement.Text = "`H`^&`H`"
  .Wrap = wdFindContinue
  .Format = True
  .Style = "FollowedHyperlink"
  .Execute Replace:=wdReplaceAll
End With

With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = ""
  .Replacement.Text = "`H`^&`H`"
  .Wrap = wdFindContinue
  .Format = True
  .Style = "span hyperlink (url)"
  .Execute Replace:=wdReplaceAll
End With

Application.ActiveWindow.View.ShowFieldCodes = True             'to show Hyperlink objects and make them Findable-----Is this necessary, once you've caught styles? maybe even undesirable?
With activeRng.Find                                                                     'if we do kill this, then we can kill the remove extra hyperlink tags foind below as well.
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = "^d HYPERLINK"
  .Replacement.Text = "`H`^&`H`"
  .Wrap = wdFindContinue                            '"hyperlink (url)"
  .Execute Replace:=wdReplaceAll                            're-hide Hyperlink objects
End With
Application.ActiveWindow.View.ShowFieldCodes = False
End Sub

Private Sub StripOrReplaceLocalStyles()
Set activeRng = ActiveDocument.Range

'------------tag key styles
Dim tagStyleFindArray(6) As Boolean              ' number of items in array should be declared here
Dim tagStyleReplaceArray(6) As String         'and here
Dim g As Long

tagStyleFindArray(1) = False        'Bold
tagStyleFindArray(2) = False        'Italic
tagStyleFindArray(3) = False        'Underline
tagStyleFindArray(4) = False        'Smallcaps
tagStyleFindArray(5) = False        'Subscript
tagStyleFindArray(6) = False        'Superscript
tagStyleReplaceArray(1) = "`B`^&`B`"
tagStyleReplaceArray(2) = "`I`^&`I`"
tagStyleReplaceArray(3) = "`U`^&`U`"
tagStyleReplaceArray(4) = "`M`^&`M`"
tagStyleReplaceArray(5) = "`S`^&`S`"
tagStyleReplaceArray(6) = "`P`^&`P`"

For g = 1 To UBound(tagStyleFindArray())
tagStyleFindArray(g) = True
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = ""
  .Replacement.Text = tagStyleReplaceArray(g)
  .Wrap = wdFindContinue
  .Format = True
  .Font.Bold = tagStyleFindArray(1)
  .Font.Italic = tagStyleFindArray(2)
  .Font.Underline = tagStyleFindArray(3)
  .Font.SmallCaps = tagStyleFindArray(4)
  .Font.Subscript = tagStyleFindArray(5)
  .Font.Superscript = tagStyleFindArray(6)
  .MatchCase = False
  .MatchWholeWord = False
  .MatchWildcards = True
  .MatchSoundsLike = False
  .MatchAllWordForms = False
  .Execute Replace:=wdReplaceAll
End With
tagStyleFindArray(g) = False
Next

'-------------Reset everything
activeRng.Font.Reset

Call zz_clearFind

'-------------apply styles to tags
Dim tagFindArray(7) As String              ' number of items in array should be declared here
Dim tagReplaceArray(7) As String         'and here
Dim h As Long

tagFindArray(1) = "`B`(*)`B`"
tagFindArray(2) = "`I`(*)`I`"
tagFindArray(3) = "`U`(*)`U`"
tagFindArray(4) = "`M`(*)`M`"
tagFindArray(5) = "`H`(*)`H`"
tagFindArray(6) = "`S`(*)`S`"
tagFindArray(7) = "`P`(*)`P`"
tagReplaceArray(1) = ActiveDocument.Styles("span boldface characters (bf)")
tagReplaceArray(2) = ActiveDocument.Styles("span italic characters (ital)")
tagReplaceArray(3) = ActiveDocument.Styles("span underscore characters (us)")
tagReplaceArray(4) = ActiveDocument.Styles("span small caps characters (sc)")
tagReplaceArray(5) = ActiveDocument.Styles("span hyperlink (url)")
tagReplaceArray(6) = ActiveDocument.Styles("span subscript characters (sub)")
tagReplaceArray(7) = ActiveDocument.Styles("span superscript characters (sup)")

For h = 1 To UBound(tagFindArray())
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = tagFindArray(h)
  .Replacement.Text = "\1"
  .Wrap = wdFindContinue
  .Format = True
  .Replacement.Style = tagReplaceArray(h)
  .MatchCase = False
  .MatchWholeWord = False
  .MatchWildcards = True
  .MatchSoundsLike = False
  .MatchAllWordForms = False
  .Execute Replace:=wdReplaceAll
End With
Next

'---remove any extra Hyperlink tags
With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = "`H`"
  .Replacement.Text = ""
  .Wrap = wdFindContinue
  .MatchWildcards = False
  .Execute Replace:=wdReplaceAll
End With
End Sub

Private Sub RmHighlights()
Set activeRng = ActiveDocument.Range

With activeRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = ""
  .Wrap = wdFindContinue
  .Format = True
  .Highlight = True
  .Replacement.Highlight = False
  .Execute Replace:=wdReplaceAll
End With
End Sub

Private Sub StraightQuotestoSmartQuotes()
Set activeRng = ActiveDocument.Range

Application.Options.AutoFormatAsYouTypeReplaceQuotes = True
  
ActiveDocument.Content.Find.Execute FindText:="'", MatchCase:=False, _
        MatchWholeWord:=False, MatchWildcards:=False, Wrap:=wdFindStop, _
        Format:=False, ReplaceWith:="'", Replace:=wdReplaceAll
ActiveDocument.Content.Find.Execute FindText:="""", MatchCase:=False, _
        MatchWholeWord:=False, MatchWildcards:=False, Wrap:=wdFindStop, _
        Format:=False, ReplaceWith:="""", Replace:=wdReplaceAll
      
'Application.Options.AutoFormatAsYouTypeReplaceQuotes = False
End Sub

Private Sub zz_clearFind()

Dim clearRng As Range
Set clearRng = ActiveDocument.Words.First

With clearRng.Find
  .ClearFormatting
  .Replacement.ClearFormatting
  .Text = ""
  .Replacement.Text = ""
  .Wrap = wdFindStop
  .Format = False
  .MatchCase = False
  .MatchWholeWord = False
  .MatchWildcards = False
  .MatchSoundsLike = False
  .MatchAllWordForms = False
  .Execute
End With
End Sub

Function zz_errorChecks()

zz_errorChecks = False
Dim mainDoc As Document
Set mainDoc = ActiveDocument

'-----make sure Style template is attached
Dim keyStyle As Word.Style
Dim styleCheck As Boolean
On Error Resume Next
Set keyStyle = mainDoc.Styles("span boldface characters (bf)")                '''Style from template to check against
styleCheck = keyStyle Is Nothing
If styleCheck Then
MsgBox "Requred style template 'macmillan.dotx' is not attached", , "Error"
zz_errorChecks = True
Exit Function
End If

'-----make sure document is saved
Dim docSaved As Boolean
docSaved = mainDoc.Saved
If docSaved = False Then
MsgBox "Your document '" & mainDoc & "' contains unsaved changes." & vbNewLine & "Please save, then run the Macro again", , "Alert"
zz_errorChecks = True
Exit Function
End If

'-----test protection
If ActiveDocument.ProtectionType <> wdNoProtection Then
MsgBox "Protection is enabled on document '" & mainDoc & "'." & vbNewLine & "Please unprotect the document and run the Macro again" & vbNewLine & vbNewLine & "TIP: If you don't know the protection password, try pasting contents of this file into a new file, and run the macro on that.", , "Error 2"
zz_errorChecks = True
Exit Function
End If

'-----test if backtick style tag already exists
Set activeRng = ActiveDocument.Range
Application.ScreenUpdating = False
With activeRng.Find
        .ClearFormatting
        .Text = "`[A-Z0-9]`"
        .MatchWildcards = True
        .Wrap = wdFindContinue
End With
Application.ScreenUpdating = True
Application.ScreenRefresh
If activeRng.Find.Execute Then
MsgBox "The Cleanup Macro cannot be run on Document:" & vbNewLine & "'" & mainDoc & "'" & vbNewLine & vbNewLine & "Please contact Digital Workflow group for support", , "Error Code: 1"
zz_errorChecks = True
End If
End Function


Sub MacmillanStyleReport()

'-----------run preliminary error checks------------
Dim exitOnError As Boolean
exitOnError = srErrorCheck()

If exitOnError <> False Then
Exit Sub
End If

''''''''''''''''''''''
''Timer opening
'Dim aTime As Double, bTime As Double
'aTime = Timer

'''''''''''''''''''''
Dim activeDoc As Document
Set activeDoc = ActiveDocument
Dim stylesGood() As String
Dim stylesGoodLong As Long
stylesGoodLong = 400                                    'could maybe reduce this number
ReDim stylesGood(stylesGoodLong)
Dim stylesBad(100) As String                            'could maybe reduce this number too
Dim styleGoodCount As Integer
Dim styleBadCount As Integer
Dim styleBadOverflow As Boolean
Dim activeParaCount As Integer
Dim J As Integer, K As Integer, L As Integer
Dim paraStyle As String
'''''''''''''''''''''
Dim activeParaRange As Range
Dim pageNumber As Integer
Dim activeDocName As String
Dim activeDocPath As String
Dim styleReportDoc As String
Dim fnum As Integer
Dim TheOS As String
TheOS = System.OperatingSystem
activeDocName = Left(activeDoc.Name, InStrRev(activeDoc.Name, ".doc") - 1)
activeDocPath = Replace(activeDoc.Path, activeDoc.Name, "")

Application.DisplayStatusBar = True
Application.ScreenUpdating = False

'Alter built-in Normal (Web) style temporarily (later, maybe forever?)
ActiveDocument.Styles("Normal (Web)").NameLocal = "_"

' Collect all styles being used
styleGoodCount = 0
styleBadCount = 0
styleBadOverflow = False
activeParaCount = activeDoc.Paragraphs.Count
For J = 1 To activeParaCount
    'Next two lines are for the status bar
    Application.StatusBar = "Checking paragraph: " & J & " of " & activeParaCount
    If J Mod 100 = 0 Then DoEvents
    paraStyle = activeDoc.Paragraphs(J).Style
        'If InStrRev(paraStyle, ")", -1, vbTextCompare) Then        'ALT calculation to "Right", can speed test
    If Right(paraStyle, 1) = ")" Then
        For K = 1 To styleGoodCount
            If paraStyle = stylesGood(K) Then Exit For
        Next K
        If K = styleGoodCount + 1 Then
            styleGoodCount = K
            stylesGood(styleGoodCount) = paraStyle
        End If
    Else
        For L = 1 To styleBadCount
            'If paraStyle = stylesBad(L) Then Exit For                  'Not needed, since we want EVERY instance of bad style
        Next L
        If L > 100 Then
                styleBadOverflow = True
            Exit For
        End If
        If L = styleBadCount + 1 Then
            styleBadCount = L
            Set activeParaRange = ActiveDocument.Paragraphs(J).Range
            pageNumber = activeParaRange.Information(wdActiveEndPageNumber)                 'alt: (wdActiveEndAdjustedPageNumber)
            stylesBad(styleBadCount) = "Page " & pageNumber & " (Paragraph " & J & "): " & vbTab & paraStyle
        End If
    End If
Next J
   
'Change Normal (Web) back (if you want to)
ActiveDocument.Styles("Normal (Web),_").NameLocal = "Normal (Web)"

'Sort good styles
If K <> 0 Then
ReDim Preserve stylesGood(K)
WordBasic.SortArray stylesGood()
End If

'create text file
styleReportDoc = activeDocPath & activeDocName & "_StyleReport.txt"

''''for 32 char Mc OS bug- could check if this is Mac OS too< PART 1
If Not TheOS Like "*Mac*" Then                      'If Len(activeDocName) > 18 Then        (legacy, does not take path into account)
    styleReportDoc = activeDocPath & "\" & activeDocName & "_StyleReport.txt"
Else
    Dim styleReportDocAlt As String
    Dim placeholdDocName As String
    placeholdDocName = "filenamePlacehold_Styleport.txt"
    styleReportDocAlt = styleReportDoc
    styleReportDoc = "Macintosh HD:private:tmp:" & placeholdDocName
End If

'set and open file for output
fnum = FreeFile()
Open styleReportDoc For Output As fnum
Print #fnum, "-----" & styleGoodCount & " Macmillan Styles In Use: -----"   '"----- Good Styles In Use: -----"
    For J = 1 To styleGoodCount
        Print #fnum, stylesGood(J)
    Next J
Print #fnum, vbCr
Print #fnum, vbCr
If styleBadCount <> 0 Then
    Print #fnum, "----- " & styleBadCount & " PARAGRAPHS WITH BAD STYLES FOUND: ----- " & vbCr
    Print #fnum, "(Please apply Macmillan styles to the following paragraphs:)",
    Print #fnum, vbCr
    For J = 1 To styleBadCount
        Print #fnum, stylesBad(J)
    Next J
Else
    Print #fnum, "----- no bad paragraph styles found ----- "
End If
Close #fnum

Application.ScreenUpdating = True
Application.ScreenRefresh

''''for 32 char Mc OS bug-<PART 2
If styleReportDocAlt <> "" Then
Name styleReportDoc As styleReportDocAlt
End If

If styleBadOverflow = True Then
MsgBox "More than 100 paragraphs were found with non-MacMillan styles." & vbCr & "Only the first 100 are shown in the Style report", , "Alert"
End If

''Timer closing
'bTime = Timer
'MsgBox "CreateStyleListEBranch: " & Format(Round(bTime - aTime, 2), "00:00:00") & " for " & activeParaCount & " paragraphs"
End Sub


Function srErrorCheck()

srErrorCheck = False
Dim mainDoc As Document
Set mainDoc = ActiveDocument
Dim iReply As Integer

'-----make sure Style template is attached
Dim keyStyle As Word.Style
Dim styleCheck As Boolean
On Error Resume Next
Set keyStyle = mainDoc.Styles("span boldface characters (bf)")                '''Style from template to check against
styleCheck = keyStyle Is Nothing
If styleCheck Then
MsgBox "Requred style template 'macmillan.dotx' is not attached", , "Error"
srErrorCheck = True
Exit Function
End If

'-----make sure document is saved
Dim docSaved As Boolean
docSaved = mainDoc.Saved
If docSaved = False Then
    iReply = MsgBox("Your document '" & mainDoc & "' contains unsaved changes." & vbNewLine & vbNewLine & _
        "Click OK to Save Document & Run Style Report." & vbNewLine & vbNewLine & "Click 'Cancel' to exit.", vbOKCancel, "Alert")
    If iReply = vbOK Then
        mainDoc.Save
    Else
        srErrorCheck = True
        Exit Function
    End If
End If

End Function
